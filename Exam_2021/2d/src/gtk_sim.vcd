$date
	Fri Aug 16 22:31:35 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module Test_tb $end
$var wire 2 ! state_display_ref [1:0] $end
$var wire 2 " state_display [1:0] $end
$var wire 2 # action_ref [1:0] $end
$var wire 2 $ action [1:0] $end
$var reg 1 % clk $end
$var reg 1 & pass $end
$var reg 1 ' power $end
$var reg 1 ( reset $end
$var reg 2 ) temp_comp [1:0] $end
$var reg 8 * test_nr [7:0] $end
$scope module AC_Controller_inst $end
$var wire 1 % clk $end
$var wire 1 ' power $end
$var wire 1 ( reset $end
$var wire 2 + state_display [1:0] $end
$var wire 2 , temp_comp [1:0] $end
$var wire 2 - action [1:0] $end
$var parameter 2 . decrease $end
$var parameter 2 / idle $end
$var parameter 2 0 increase $end
$var parameter 2 1 off $end
$var reg 2 2 curr_state [1:0] $end
$var reg 2 3 next_state [1:0] $end
$upscope $end
$scope module AC_Controller_ref_inst $end
$var wire 1 % clk $end
$var wire 1 ' power $end
$var wire 1 ( reset $end
$var wire 2 4 state_display [1:0] $end
$var wire 2 5 temp_comp [1:0] $end
$var wire 2 6 action [1:0] $end
$var parameter 2 7 decrease $end
$var parameter 2 8 idle $end
$var parameter 2 9 increase $end
$var parameter 2 : off $end
$var reg 2 ; curr_state [1:0] $end
$var reg 2 < next_state [1:0] $end
$upscope $end
$scope task finish_test $end
$upscope $end
$scope task test_evalutation $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b0 :
b10 9
b11 8
b1 7
b0 1
b10 0
b11 /
b1 .
$end
#0
$dumpvars
bx <
bx ;
bx 6
b0 5
bx 4
bx 3
bx 2
bx -
b0 ,
bx +
b1 *
b0 )
1(
0'
1&
0%
bx $
bx #
bx "
bx !
$end
#100
b0 <
b11 #
b11 6
b0 3
b11 $
b11 -
b0 !
b0 4
b0 ;
b0 "
b0 +
b0 2
1%
#200
0%
#300
1%
#400
0%
0(
#500
1%
#600
0%
#700
1%
#800
b11 3
b11 <
0%
1'
#900
b0 #
b0 6
b0 $
b0 -
b11 !
b11 4
b11 ;
b11 "
b11 +
b11 2
1%
#1000
b1 3
b1 <
0%
b10 )
b10 ,
b10 5
#1100
b1 $
b1 -
b1 #
b1 6
b1 "
b1 +
b1 2
b1 !
b1 4
b1 ;
1%
#1200
b10 3
b10 <
0%
b1 )
b1 ,
b1 5
#1300
b10 #
b10 6
b10 $
b10 -
b10 !
b10 4
b10 ;
b10 "
b10 +
b10 2
1%
#1400
b11 3
b11 <
0%
b0 )
b0 ,
b0 5
#1500
b0 $
b0 -
b0 #
b0 6
b11 "
b11 +
b11 2
b11 !
b11 4
b11 ;
1%
#1600
0%
0'
#1700
1%
#1800
b1 3
b1 <
0%
b10 )
b10 ,
b10 5
1'
#1900
b1 $
b1 -
b1 #
b1 6
b1 "
b1 +
b1 2
b1 !
b1 4
b1 ;
1%
#2000
b10 3
b10 <
0%
b1 )
b1 ,
b1 5
#2100
b10 #
b10 6
b10 $
b10 -
b10 !
b10 4
b10 ;
b10 "
b10 +
b10 2
1%
#2200
0%
b10 )
b10 ,
b10 5
0'
#2300
1%
#2400
b11 3
b11 <
0%
b0 )
b0 ,
b0 5
1'
#2500
b0 #
b0 6
b0 $
b0 -
b11 !
b11 4
b11 ;
b11 "
b11 +
b11 2
1%
#2600
0%
1(
b10 *
#2700
b11 3
b11 $
b11 -
b11 <
b11 #
b11 6
b0 "
b0 +
b0 2
b0 !
b0 4
b0 ;
1%
#2800
0%
#2900
1%
#3000
0%
0(
#3100
b0 $
b0 -
b0 #
b0 6
b11 "
b11 +
b11 2
b11 !
b11 4
b11 ;
1%
#3200
b10 3
b10 <
0%
b1 )
b1 ,
b1 5
#3300
b10 #
b10 6
b10 $
b10 -
b10 !
b10 4
b10 ;
b10 "
b10 +
b10 2
1%
#3400
0%
#3500
1%
#3600
b11 3
b11 <
0%
b0 )
b0 ,
b0 5
#3700
b0 #
b0 6
b0 $
b0 -
b11 !
b11 4
b11 ;
b11 "
b11 +
b11 2
1%
#3800
0%
0'
#3900
1%
#4000
b1 3
b1 <
0%
b10 )
b10 ,
b10 5
1'
#4100
b1 #
b1 6
b1 $
b1 -
b1 !
b1 4
b1 ;
b1 "
b1 +
b1 2
1%
#4200
b10 3
b10 <
0%
b1 )
b1 ,
b1 5
#4300
b10 $
b10 -
b10 #
b10 6
b10 "
b10 +
b10 2
b10 !
b10 4
b10 ;
1%
#4400
b1 3
b1 <
0%
b10 )
b10 ,
b10 5
#4500
b1 #
b1 6
b1 $
b1 -
b1 !
b1 4
b1 ;
b1 "
b1 +
b1 2
1%
#4600
b11 3
b11 <
0%
b0 )
b0 ,
b0 5
#4700
b0 $
b0 -
b0 #
b0 6
b11 "
b11 +
b11 2
b11 !
b11 4
b11 ;
1%
#4800
0%
b10 )
b10 ,
b10 5
0'
#4900
1%
#5000
0%
b0 )
b0 ,
b0 5
1'
#5100
1%
#5200
0%
b11 *
#5300
1%
#5400
0%
#5500
1%
#5600
0%
